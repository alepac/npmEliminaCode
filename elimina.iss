; Script generated by the Inno Script Studio Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Elimina Code"
#define MyAppVersion "1.0"
#define MyAppPublisher "Enycs"
#define MyAppURL "http://www.enycs.com/"
#define MyAppExeName "npm-elimina-code.exe"
#define MyWebFolder "www"
#define MyHookFolder "node_modules\iohook\builds\node-v64-win32-x64\build\Release"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{051A0886-B1D5-46A9-A1F1-1273DE518711}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf64}\{#MyAppName}
DisableDirPage=yes
DefaultGroupName={#MyAppName}
OutputBaseFilename=EliminaCodeSetup
Compression=lzma
SolidCompression=yes
VersionInfoVersion={#MyAppVersion}
VersionInfoCompany=Enycs
VersionInfoDescription=Elimina code WebBased
ShowLanguageDialog=no
DisableProgramGroupPage=yes

[Languages]
Name: "italian"; MessagesFile: "compiler:Languages\Italian.isl"

[Files]
; NOTE: Don't use "Flags: ignoreversion" on any shared system files
Source: "counterTemplate.html"; DestDir: "{app}"
Source: "iohook.node"; DestDir: "{app}\{#MyHookFolder}"
Source: "uiohook.dll"; DestDir: "{app}\{#MyHookFolder}"
Source: ".\dist\{#MyAppExeName}"; DestDir: "{app}"; DestName: "{#MyAppExeName}"; Flags: replacesameversion
Source: "vc_redist.x64.exe"; DestDir: "{app}"; Check: RedistCheck
Source: "hosts"; DestDir: "{sys}\drivers\etc"
Source: "notify.mp3"; DestDir: "{app}"
Source: "pling.vbs"; DestDir: "{app}"
Source: "config.json"; DestDir: "{app}"

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{group}\config.json"; Filename: "{app}\config.json"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
Name: "{userstartup}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Check: StartAtBootCheck

[Run]
Filename: "{app}\vc_redist.x64.exe"; Flags: skipifdoesntexist ; Check: RedistCheck
Filename: "{app}\{#MyAppExeName}"; Flags: nowait ; Check: StartNowCheck

[UninstallRun]Filename: "taskkill"; Parameters: "/F /IM {#MyAppExeName}"

[Code]
var
  StartAtBootChecked: Boolean;
  StartAtBootCheckResult: Boolean;
  StartNowChecked: Boolean;
  StartNowCheckResult: Boolean;

const
  NET_FW_SCOPE_ALL = 0;
  NET_FW_IP_VERSION_ANY = 2;

procedure RunOtherInstaller;
var
  ResultCode: Integer;
begin
  if not Exec(ExpandConstant('{app}\vc_redist.x64.exe'), '', '', SW_SHOWNORMAL,
    ewWaitUntilTerminated, ResultCode)
  then
    MsgBox('Other installer failed to run!' + 
      SysErrorMessage(ResultCode), mbError, MB_OK);
end;

procedure SetFirewallException(AppName,FileName:string);
var
  FirewallObject: Variant;
  FirewallManager: Variant;
  FirewallProfile: Variant;
begin
  try
    FirewallObject := CreateOleObject('HNetCfg.FwAuthorizedApplication');
    FirewallObject.ProcessImageFileName := FileName;
    FirewallObject.Name := AppName;
    FirewallObject.Scope := NET_FW_SCOPE_ALL;
    FirewallObject.IpVersion := NET_FW_IP_VERSION_ANY;
    FirewallObject.Enabled := True;
    FirewallManager := CreateOleObject('HNetCfg.FwMgr');
    FirewallProfile := FirewallManager.LocalPolicy.CurrentProfile;
    FirewallProfile.AuthorizedApplications.Add(FirewallObject);
  except
  end;
end;

procedure RemoveFirewallException( FileName:string );
var
  FirewallManager: Variant;
  FirewallProfile: Variant;
begin
  try
    FirewallManager := CreateOleObject('HNetCfg.FwMgr');
    FirewallProfile := FirewallManager.LocalPolicy.CurrentProfile;
    FireWallProfile.AuthorizedApplications.Remove(FileName);
  except
  end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
var
  ResultCode: Integer;
begin
  if CurStep=ssInstall then
  begin
    Exec(ExpandConstant('taskkill'), '/F /IM {#MyAppExeName}', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    FileCopy(ExpandConstant('{sys}') + '\drivers\etc\hosts', ExpandConstant('{sys}') + '\drivers\etc\hosts.bkp', true)
  end
  else  if CurStep=ssPostInstall then
      SetFirewallException('{#MyAppName}', ExpandConstant('{app}\')+'{#MyAppExeName}');
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
  if CurUninstallStep=usPostUninstall then
  begin
     RemoveFirewallException(ExpandConstant('{app}\')+'{#MyAppExeName}');
     RenameFile(ExpandConstant('{sys}') + '\drivers\etc\hosts.bkp', ExpandConstant('{sys}') + '\drivers\etc\hosts')
  end
end;

function StartAtBootCheck(): Boolean;
begin
  if not StartAtBootChecked then begin
    StartAtBootCheckResult := MsgBox('Eseguire {#MyAppName} all''avvio del sistema?', mbConfirmation, MB_YESNO) = idYes;
    StartAtBootChecked := True;
  end;
  Result := StartAtBootCheckResult;
end;

function StartNowCheck(): Boolean;
begin
  if not StartNowChecked then begin
    StartNowCheckResult := MsgBox('Eseguire {#MyAppName} ora?', mbConfirmation, MB_YESNO) = idYes;
    StartNowChecked := True;
  end;
  Result := StartNowCheckResult;
end;

function RedistCheck(): Boolean;
var
  ResultCode: Integer;
begin
  if not Exec(ExpandConstant('{app}\{#MyAppExeName}'), '--dryrun', '', SW_SHOWNORMAL,
      ewWaitUntilTerminated, ResultCode) then
      Result := True
  else if ResultCode = 0 then
    Result := False
  else
    Result := True;
end;


